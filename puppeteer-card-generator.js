const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');

// –ö–∞—Ä—Ç–æ—á–∫–∏
const cards = [
    {
        title: 'Use Present Perfect',
        description: 'Say one thing you and your friends have tried recently.',
        search: 'brain',
        externalFrameColor: 'ff00ff',
        internalFrameColor: '0000ff'
    },
    {
        title: 'Talk About Emotions',
        description: 'Say how you felt during your last group activity.',
        search: 'emotion',
        externalFrameColor: '00ffff',
        internalFrameColor: 'ffcc00'
    }
];

const downloadPath = path.resolve('./downloads');

(async () => {
    fs.mkdirSync(downloadPath, { recursive: true });

    const browser = await puppeteer.launch({
        headless: false,
        defaultViewport: null,
        args: ['--no-sandbox']
    });

    const page = await browser.newPage();

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–ø–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    const client = await page.target().createCDPSession();
    await client.send('Page.setDownloadBehavior', {
        behavior: 'allow',
        downloadPath
    });

    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–∞–π—Ç
    await page.goto('https://obscurrro.vercel.app'); // <-- –∑–∞–º–µ–Ω–∏ –Ω–∞ –Ω—É–∂–Ω—ã–π URL
    await later(3000);

    for (const card of cards) {
        console.log(`\nüé¥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏: "${card.title}"`);

        await clearInput(page, '#title-input');
        await clearInput(page, '#subtitle-input');
        await clearInput(page, '#description-input');
        await clearInput(page, '#external-frame-color-input');
        await clearInput(page, '#internal-frame-color-input');
        await clearInput(page, '#search-input');

        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π
        await page.type('#title-input', card.title);
        await page.type('#description-input', card.description);
        await page.type('#external-frame-color-input', card.externalFrameColor);
        await page.type('#internal-frame-color-input', card.internalFrameColor);
        await page.type('#search-input', card.search);

        // –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–∏–Ω–∫–∏
        await page.click('#search-button');

        const previousSrcs = await page.$$eval('#image-list [id^="image-"] img', imgs =>
            imgs.map(img => img.getAttribute('src')).filter(Boolean)
        );

        // –ñ–¥—ë–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–¥–æ 5 —Å–µ–∫)
        try {
            await page.waitForFunction((prev) => {
                const images = document.querySelectorAll('#image-list [id^="image-"] img');
                const currentSrcs = Array.from(images).map(img => img.getAttribute('src')).filter(Boolean);

                // –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω src, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ
                return currentSrcs.some(src => !prev.includes(src) && src.startsWith('http'));
            }, {
                timeout: 7000
            }, previousSrcs);
        } catch (e) {
            console.log('‚ùå –ö–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å (src –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è). –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.', e);
            continue;
        }

        // –ö–ª–∏–∫–∞–µ–º –ø–æ —Å–ª—É—á–∞–π–Ω–æ–π
        const imageHandles = await page.$$('[id^="image-"]');
        if (imageHandles.length === 0) {
            console.log('‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
            continue;
        }
        const randomIndex = Math.floor(Math.random() * imageHandles.length);
        await imageHandles[randomIndex].click();

        // –ù–∞–∂–∏–º–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –∂–¥—ë–º —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        const filePromise = waitForDownload(downloadPath, 10000);
        await page.click('#save-button');

        const file = await filePromise;
        if (file) {
            console.log('‚úÖ –°–∫–∞—á–∞–Ω —Ñ–∞–π–ª:', file);

            const finalName = `${Date.now()}_card.png`;

            const renamed = renameDownloadedFile(downloadPath, file, finalName);
            if (renamed) {
                console.log('üìÅ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤:', renamed);
            }
        } else {
            console.log('‚ö†Ô∏è –§–∞–π–ª –Ω–µ —Å–∫–∞—á–∞–ª—Å—è –≤–æ–≤—Ä–µ–º—è');
        }
    }

    await browser.close();
})();

// –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—â—å—é fs.watch
function waitForDownload(folderPath, timeout = 10000) {
    return new Promise((resolve) => {
        let finalFile = null;

        const watcher = fs.watch(folderPath, async (eventType, filename) => {
            if (eventType === 'rename' && filename && !filename.endsWith('.crdownload')) {
                finalFile = filename;
                watcher.close();
                resolve(finalFile);
            }
        });

        setTimeout(() => {
            watcher.close();
            resolve(null);
        }, timeout);
    });
}

function later(delay) {
    return new Promise(function (resolve) {
        setTimeout(resolve, delay);
    });
}

async function clearInput(page, inputId) {
    const inputValue = await page.$eval(inputId, el => el.value);
    await page.click(inputId);
    for (let i = 0; i < inputValue.length; i++) {
        await page.keyboard.press('Backspace');
    }
}

function renameDownloadedFile(folderPath, oldName, newName) {
    const oldPath = path.join(folderPath, oldName);
    const newPath = path.join(folderPath, newName);
    if (fs.existsSync(oldPath)) {
        fs.renameSync(oldPath, newPath);
        return newName;
    }
    return null;
}

